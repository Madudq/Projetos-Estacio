# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AtUG-w-frDomHfRpwZP49_SYzKv_6SrD
"""

#carregamento e manipulação dos dados
import pandas as pd
#visualizacao de dados (Graficos)
import plotly.express as px

#divisao dos dados
from sklearn.model_selection import train_test_split

#Modelos de Algoritmos de Regressão
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor

#Aplicação das Métricas
from sklearn.metrics import mean_absolute_error, r2_score

#Exportar e utilizar os modelos
import joblib

df = pd.read_csv("/content/taxa de cambio 2020 x 2025 atualizado - Planilha1.csv",
                   sep=",")
df #

df.dtypes #verifiquei tipos dos dados

df['Date'] = pd.to_datetime(df['Date']) # mudei o tipo de dado de data para datetime

df.isnull().sum()

df['Ant'] = df['Ant'].str.replace(',', '.', regex=False).astype(float) # transformei para float

df['Dep'] = df['Dep'].str.replace(',', '.', regex=False).astype(float) # transformei para float

df.dtypes # Verifiquei tipos de dados de novo

df['Date'].min() #data mais antiga

df['Date'].max() #data mais nova

df["Month"] = df["Date"].dt.month #criar coluna mes

df["Day"] = df["Date"].dt.day #criar coluna dia

df["Year"] = df["Date"].dt.year #criar coluna ano

df.to_csv("novo_clunas.csv") #criei o CSV para guardar a informação das colunas novas

df.head() #verifiquei como estava o cabeçario do dataframe

df.dtypes #Verifiquei se os dados das novas colunas estava correto

df_mensal = df.groupby(['Year', 'Month'])['Dep'].mean() #Agrupei as colunas ano e mes com a media da taxa de cambio

df_mensal2024 = df[df['Year'] == 2024].groupby('Month')['Dep'].mean().reset_index() #filtrei por ano, agrupei por mês e selecionei a media de Dep

df_mensal

df_mensal2024.to_csv("novo_clunas2025.csv") #Criei o CSV se estava dando certo, verifiquei no excel e está correto

fig = px.line(
    df_mensal2024,#selecionando a dataframe
    x="Month",#colocando a "Month" como o eixo x
    y="Dep", # colocando o "Dep" como eixo y
    title="Média Mensal da taxa de câmbio em 2024", # coloquei o titulo
    labels={"Month": "Mês", "Dep": "Média da taxa de câmbio"}, # mudei a nomeclatura exibida no gráfico, de Month para mês e de Dep para Média de Dep.
    color_discrete_sequence=["dodgerblue"] #coloquei a cor da barra como "dodgerblue"
)

fig.update_layout(template="plotly_white")#aplicando o tema visual
fig.show()

df_ano = df.groupby(['Year', 'Month'])['Dep'].mean().reset_index()

df_ano['Dataano'] = pd.to_datetime(df_ano[['Year', 'Month']].assign(Day=1))

fig = px.line(
    df_ano,#selecionando a dataframe
    x="Dataano",#colocando a "Month" como o eixo x
    y="Dep", # colocando o "Dep" como eixo y
    title="Média Anual da taxa de câmbio dos últimos 5 anos", # coloquei o titulo
    labels={"Dataano": "Ano", "Dep": "Média da taxa de cambio"}, # mudei a nomeclatura exibida no gráfico, de Month para mês e de Dep para Média de Dep.
    color_discrete_sequence=["dodgerblue"] #coloquei a cor da barra como "dodgerblue"
)

fig.update_layout(template="plotly_white")#aplicando o tema visual
fig.show()

df_ano = df.groupby('Year')['Dep'].mean().reset_index()

fig = px.bar(
    df_ano,  # Seleciona o DataFrame com as médias por ano
    x="Year",  # Define a coluna "Year" como eixo X (anos)
    y="Dep",  # Define a coluna "Dep" como eixo Y (média da variável Dep)
    title="Média Anual de Dep",  # Título do gráfico
    labels={"Year": "Ano", "Dep": "Média de Dep"},  # Renomeia os eixos para exibição mais amigável
    color_discrete_sequence=["dodgerblue"]  # Define a cor das barras como azul (dodgerblue)
)

# Adiciona borda preta às barras
fig.update_traces(marker_line_color='black', marker_line_width=1)  # Cor da borda preta e espessura de 1

# Aplica o tema branco (limpo) ao gráfico
fig.update_layout(template="plotly_white")

# Exibe o gráfico
fig.show()

#usando o Plotly

df.drop(columns="Date", inplace=True) #deletei data, pois já temos as colunas para isso

x = df[["Day","Month", "Year"]] #dividindo entrada
y = df[["Dep"]]#dividindo saida

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=42, test_size = 0.3); #separando para teste

x_train #mostre x teste

dt = DecisionTreeRegressor() #criando algoritmo de árvore de decisão

dt.fit(x_train, y_train) #treinando o algoritmo

dt_pred = dt.predict(x_test) #testando com o predict
dt_pred

mean_absolute_error(y_test,dt_pred ) # metrica mean_absolute_error

r2_score(y_test, dt_pred) # metrica R2

fig = px.scatter( #criando da grafico do real vs predito
    x=y_test["Dep"],
    y=dt_pred,
    title="Real x Predito - Decision Tree",
    trendline="ols",
    labels={"x": "Real", "y": "Predita"}
)
fig.show()

joblib.dump(dt, "dtcambio.pkl") #salvando o modelo

dt_model = joblib.load("dtcambio.pkl")#carregando o modelo

teste = [[2,6,2025]]
dt_model.predict(teste)#Testando o modelo

rf = RandomForestRegressor(n_estimators=10000)

rf.fit(x_train,y_train)

rf_pred = rf.predict(x_test)
rf_pred

mean_absolute_error(y_test,rf_pred)

r2_score(y_test, rf_pred)

fig = px.scatter(
    x=y_test["Dep"],
    y=rf_pred,
    title="Real x Predito - Random Forest",
    trendline="ols",
    labels={"x": "Real", "y": "Predita"}
)
fig.show()

joblib.dump(rf, "rfcambio.pkl")

rf_model = joblib.load("rfcambio.pkl")

teste = [[2,6,2025]]
rf_model.predict(teste)

knn = KNeighborsRegressor()

knn.fit(x_train, y_train)

knn_pred = knn.predict(x_test).ravel()

knn_pred

df["Dep"]

mean_absolute_error(y_test, knn_pred)

r2_score(y_test, knn_pred)

fig = px.scatter(
    x=y_test["Dep"],
    y=knn_pred,
    title="Real x Predito - KNeighbors ",
    trendline="ols",
    labels={"x": "Real", "y": "Predita"}
)
fig.show()

joblib.dump(knn, "knncambio.pkl")

knn_model = joblib.load("knncambio.pkl")

teste = [[2,6,2025]]
knn_model.predict(teste)